package main.java.com.AlexParchuk.javacore.chapter10;

/**Исключение в Java представляет собой объект, описывающий исключительную
 * (т.е. ошибочную) ситуацию, возникающую в определенной части программного кода.
 *
 *
 * Управление обработкой исключений в Java осуществляется с помощью пяти ключевых слов:
 * try, catch, throw, throws и finally.
 *
 * Операторы программы, которые требуется отслеживать на предмет исключений, размещаются в блоке try.
 * Если исключение возникает в блоке try, оно генерируется.
 * Прикладной код может перехватить исключение, используя блок catch, а затем обработать его некоторым
 * рациональным способом.
 *
 * Для генерирования исключения вручную служит ключевое слово throw.
 * Любое исключение, генерируемое в теле метода, должно быть обозначено в его объявлении ключевым словом throws.
 *
 * А любой код, который необходимо выполнить по завершении блока try, размещается в блоке finally.
 *
 * try { // блок кода, в котором отслеживаются ошибки}
 * catch (тип_исключения_l ехОЬ) {обработчик исключений тип_исключения_1}
 * catch (тип_исключения_2 ехОЬ) {обработчик исключений тип_исключения_2}
 * finally { блок кода, который должен быть непременно выполнен по завершении блока try}
 *
 * тип_исключения обозначает тип возникающего исключения.
 *
 * исключения можно генерировать и непосредственно в прикладной программе, используя оператор throw.
 * throw генерируемый_экземпляр; //генерируемый_экземпляр должен быть объектом класса Throwable или производного от него подкласса
 * Получить объект класса Throwable можно двумя способами, указав соответствующий параметр в операторе саtсh
 * или создав этот объект с помощью операции new.
 *
 * throw
 * Исключения можно генерировать и непосредственно в прикладной программе, используя оператор throw.
 * throw генерируемый_экземпляр;
 * генерируемый_экземпляр должен быть объектом класса Throwable или производного от него подкласса.
 *
 * throws
 * тип имя_метода(список_параметров) throws список_исключений
 * список_исключений обозначает разделяемый запятыми список исключений, которые метод может сгенерировать.
 *
 * finally
 * Оператор finally образует блок кода, который будет выполнен по завершении
 * блока операторов try/catch, но перед следующим за ним кодом.
 * Указывать оператор finally необязательно, но каждому оператору try требуется хотя бы
 * один оператор саtch или finally.
 *
 * RuntimeException
 * исключения не обязательно включать в список оператора
 * throws в объявлении метода. В языке Java такие исключения называются непроверяемыми
 * исключениями, поскольку компилятор не проверяет, обрабатываются или генерируются они в каком-нибудь методе.
 *
 * Цепочки исключений - позволяет связывать одно исключение с другим, чтобы описывать в последнем причину появления первого.
 * Чтобы разрешить цепочки исключений, в класс Throwable были введены два конструктора и два метода.
 *
 * Throwable(Throwable причина_исключения)
 * Throwable(String сообщение, Throwable причина_исключения)
 *
 * Для организации цепочки исключений в класс Throwable были также введены методы getCause() и initCause()
 *
 * Throwable getCause()
 * Throwable initCause(Throwable причина_исключения)
 *
 * Метод getCause() возвращает исключение, вызывающее текущее исключение. Если же такое исключение отсутствует, то возвращается
 * пустое значение null. Метод initCause() связывает причину_исключения с вызывающим исключением и возвращает ссылку на исключение.
 *
 * Многократный перехват позволяет перехватывать несколько исключений в одном и том же операторе catch.
 * Чтобы организовать многократный перехват, достаточно объединить отдельные типы исключений в операторе catch с помощью логической операции ИЛИ.
 * catch(ArithmeticException | ArrayindexOutOfBoundsException е)
 */
public class Exceptions {
}


