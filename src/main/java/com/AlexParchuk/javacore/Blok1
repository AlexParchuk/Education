1. Класс Object
public final native Class<?> getClass()
public native int hashCode();
public boolean equals(Object obj)
protected native Object clone()
public String toString()
public final native void notify()
public final native void notifyAll()
public final void wait()
public final native void wait(long timeoutMillis)
public final void wait(long timeoutMillis, int nanos)
protected void finalize()

2. Object equals() и hashCode()
equals() - сравнение объектов по ссылкам на равенство
hashCode() - int, хеш код объекта () - число, 1.которое зависит от данных в объекте 2. ячейка в памяти в числовом представлении
if (a.equals(b) == true) a.hashCode() = b.hashCode()
if (a.hashCode() != b.hashCode()) a.equals(b) == false
Используется для грубого сравнения объектов. если совпадают, тогда сравнение на equals()

3. Метод класса Object hashCode() - число int

4. Метод класса Object equals() - сравнение ссылок

5. == vs equals()
 == - сравнение области памяти, где хранятся объекты. для примитивных типов работает коректно
 equals() - сравнивает по ссылке, this == obj

6. Интерфейсы vs Абстрактный класс
В интерфейсе переменные public и final, в абстрактном класе переменные могут изменятся
В интерфейсе метод по умолчанию - public, в абстрактном класе методы могут быть private и protected (Java 9 допускает private методы в интерфейсе???)
Интерфейсы не характеризуют состояние объекта..абстрактные классы - могут
Абстрактный клас может иметь конструктор, интерфейс - нет.


7,8. Модификаторы доступа
методы + переменные
privet - только в этом класе
default (без модификатора) - во всем пакете
protected - во всем пакете + во всех потомках
public - во все проекте
классы
default (без модификатора) - во всем пакете
public - во все проекте
default в методах интерфейса - метод по умолчанию, можно не реализовывать в классах реализующих интерфейс

9. Ключевое слово static
static:
- получение метода, без получения класса;
- статические блоки инициализации - выполняется при первой загрузке класса
- в статическом методе нельзя использовать this
- статический метод загружается один раз, а не для каждого объекта. Использует меньше памяти
- статические переменные существуют вне объекта

10. final
 - переменные - константы, нужно инициализировать (при объявлении/в блоке инициализации екземпляра/в конструкторе/статическом блоке).
   Представлять такие переменные в верхнем регистре + нужно использовать "_" при разделении слов
 - методы - не переопределяются в потомках классов
 - класс - не наследуются

 11. Примитивные типы данных

 long VariableLong;   // -9223372036854775808 - 9223372036854775807 - 64x
 int VariableInteger; // -2147483648 - 2147483647 - 32x
 short VariableShort; // -32768 - 32767 - 16x
 byte VariableByte;   // -128 - 127 - 8x

 float VariableFloat; // 4.9е-324 - 1.8е+308    - 32x
 double VariableDouble; // 1.4е-045 - 3.4е+ОЗ8  - 64x

 char VariableChar; // Unicode О - 65536 - 16x

 boolean b; // true - false


